// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAccountRepository is a mock of AccountRepository interface
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockAccountRepository) Find(no *AccountNo) *Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", no)
	ret0, _ := ret[0].(*Account)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockAccountRepositoryMockRecorder) Find(no interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAccountRepository)(nil).Find), no)
}

// DeleteAll mocks base method
func (m *MockAccountRepository) DeleteAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAll")
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockAccountRepositoryMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockAccountRepository)(nil).DeleteAll))
}

// Save mocks base method
func (m *MockAccountRepository) Save(account *Account) *Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", account)
	ret0, _ := ret[0].(*Account)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountRepositoryMockRecorder) Save(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountRepository)(nil).Save), account)
}

// MockAccountAccessRepository is a mock of AccountAccessRepository interface
type MockAccountAccessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAccessRepositoryMockRecorder
}

// MockAccountAccessRepositoryMockRecorder is the mock recorder for MockAccountAccessRepository
type MockAccountAccessRepositoryMockRecorder struct {
	mock *MockAccountAccessRepository
}

// NewMockAccountAccessRepository creates a new mock instance
func NewMockAccountAccessRepository(ctrl *gomock.Controller) *MockAccountAccessRepository {
	mock := &MockAccountAccessRepository{ctrl: ctrl}
	mock.recorder = &MockAccountAccessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAccessRepository) EXPECT() *MockAccountAccessRepositoryMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method
func (m *MockAccountAccessRepository) DeleteAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAll")
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockAccountAccessRepositoryMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockAccountAccessRepository)(nil).DeleteAll))
}

// Save mocks base method
func (m *MockAccountAccessRepository) Save(access *AccountAccess) *AccountAccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", access)
	ret0, _ := ret[0].(*AccountAccess)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountAccessRepositoryMockRecorder) Save(access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountAccessRepository)(nil).Save), access)
}

// Delete mocks base method
func (m *MockAccountAccessRepository) Delete(access *AccountAccess) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", access)
}

// Delete indicates an expected call of Delete
func (mr *MockAccountAccessRepositoryMockRecorder) Delete(access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountAccessRepository)(nil).Delete), access)
}

// FindManagedAccountsOf mocks base method
func (m *MockAccountAccessRepository) FindManagedAccountsOf(client *Client, asOwner bool) []*Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManagedAccountsOf", client, asOwner)
	ret0, _ := ret[0].([]*Client)
	return ret0
}

// FindManagedAccountsOf indicates an expected call of FindManagedAccountsOf
func (mr *MockAccountAccessRepositoryMockRecorder) FindManagedAccountsOf(client, asOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManagedAccountsOf", reflect.TypeOf((*MockAccountAccessRepository)(nil).FindManagedAccountsOf), client, asOwner)
}

// FindFullAccounts mocks base method
func (m *MockAccountAccessRepository) FindFullAccounts(minBalance *Account) []*Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFullAccounts", minBalance)
	ret0, _ := ret[0].([]*Account)
	return ret0
}

// FindFullAccounts indicates an expected call of FindFullAccounts
func (mr *MockAccountAccessRepositoryMockRecorder) FindFullAccounts(minBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFullAccounts", reflect.TypeOf((*MockAccountAccessRepository)(nil).FindFullAccounts), minBalance)
}

// Find mocks base method
func (m *MockAccountAccessRepository) Find(client *Client, account *Account) *AccountAccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", client, account)
	ret0, _ := ret[0].(*AccountAccess)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockAccountAccessRepositoryMockRecorder) Find(client, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAccountAccessRepository)(nil).Find), client, account)
}

// MockClientRepository is a mock of ClientRepository interface
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method
func (m *MockClientRepository) DeleteAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAll")
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockClientRepositoryMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockClientRepository)(nil).DeleteAll))
}

// Save mocks base method
func (m *MockClientRepository) Save(client *Client) (*Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", client)
	ret0, _ := ret[0].(*Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockClientRepositoryMockRecorder) Save(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClientRepository)(nil).Save), client)
}

// Delete mocks base method
func (m *MockClientRepository) Delete(client *Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", client)
}

// Delete indicates an expected call of Delete
func (mr *MockClientRepositoryMockRecorder) Delete(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientRepository)(nil).Delete), client)
}

// Find mocks base method
func (m *MockClientRepository) Find(id float64) *Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*Client)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockClientRepositoryMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockClientRepository)(nil).Find), id)
}

// FindByName mocks base method
func (m *MockClientRepository) FindByName(username string) *Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", username)
	ret0, _ := ret[0].(*Client)
	return ret0
}

// FindByName indicates an expected call of FindByName
func (mr *MockClientRepositoryMockRecorder) FindByName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockClientRepository)(nil).FindByName), username)
}

// FindAll mocks base method
func (m *MockClientRepository) FindAll() []*Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*Client)
	return ret0
}

// FindAll indicates an expected call of FindAll
func (mr *MockClientRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockClientRepository)(nil).FindAll))
}

// FindAllBornFrom mocks base method
func (m *MockClientRepository) FindAllBornFrom(birthday time.Time) []*Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBornFrom", birthday)
	ret0, _ := ret[0].([]*Client)
	return ret0
}

// FindAllBornFrom indicates an expected call of FindAllBornFrom
func (mr *MockClientRepositoryMockRecorder) FindAllBornFrom(birthday interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBornFrom", reflect.TypeOf((*MockClientRepository)(nil).FindAllBornFrom), birthday)
}
